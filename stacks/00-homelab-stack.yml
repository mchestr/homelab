version: '3.4'
services:
  prometheus:
    image: prom/prometheus:v2.15.2
    volumes:
      - prometheus:/prometheus
    networks:
    - proxy
    secrets:
    - source: traefik_proxy_password.v1
      target: traefik_proxy_password
    configs:
    - source: prometheus.yml.v3
      target: /etc/prometheus/prometheus.yml
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${SUBDOMAIN}`)
      - traefik.http.routers.prometheus.entrypoints=https
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.middlewares=auth-prometheus
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.http.middlewares.auth-prometheus.basicauth.users=${TRAEFIK_PROMETHEUS_CREDENTIALS}
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
    - portainer:/data
    networks:
    - portainer_agent
    - proxy
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${SUBDOMAIN}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  agent:
    image: portainer/agent
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
    - portainer_agent
    deploy:
      mode: global
      placement:
        constraints:
        - node.platform.os == linux
      update_config:
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  proxy:
    image: traefik:v2.1.2
    command:
    - "--api"
    - "--entrypoints.http.address=:80"
    - "--entrypoints.https.address=:443"
    - "--entrypoints.metrics.address=:8080"
    - "--entrypoints.mqtts.address=:8883"
    - "--providers.docker"
    - "--providers.docker.exposedByDefault=false"
    - "--providers.docker.network=proxy"
    - "--providers.docker.swarmmode"
    - "--providers.docker.watch"
    - "--certificatesResolvers.le.acme.email=${SMTP_EMAIL}"
    - "--certificatesResolvers.le.acme.storage=/etc/traefik/acme/acme.json"
    - "--certificatesResolvers.le.acme.dnsChallenge.provider=gandiv5"
    - "--metrics=true"
    - "--metrics.prometheus=true"
    - "--metrics.prometheus.entryPoint=metrics"
    - "--accesslog=true"
    ports:
    - 80:80
    - 443:443
    - 8080:8080
    - 8883:8883
    secrets:
    - source: gandi_api_key.v1
      target: gandi_api_key
    environment:
    - GANDIV5_API_KEY_FILE=/run/secrets/gandi_api_key
    networks:
    - proxy
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock:ro"
    - traefik:/etc/traefik/acme
    deploy:
      mode: global
      labels:
      - traefik.enable=true
      # Global Redirect to HTTPS
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https

      # Traefik frontend UI and cert request labels
      - traefik.http.routers.api.rule=Host(`proxy.${SUBDOMAIN}`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.entrypoints=https
      - traefik.http.routers.api.middlewares=auth-proxy
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=le
      - traefik.http.routers.api.tls.domains[0].main=${SUBDOMAIN}
      - traefik.http.routers.api.tls.domains[0].sans=*.${SUBDOMAIN}

      - traefik.http.routers.metrics.rule=Host(`proxy.${SUBDOMAIN}`) && PathPrefix(`/metrics`)
      - traefik.http.routers.metrics.entrypoints=metrics
      - traefik.http.routers.metrics.middlewares=auth-proxy
      - traefik.http.routers.metrics.tls=true
      - traefik.http.routers.metrics.service=metrics
      - traefik.http.services.metrics.loadbalancer.server.port=8080

      # middleware redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.auth-proxy.basicauth.users=${TRAEFIK_PROXY_CREDENTIALS}
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  influxdb:
    image: influxdb
    volumes:
    - influxdb_data:/var/lib/influxdb
    environment:
    - INFLUXDB_HTTP_AUTH_ENABLED=true
    - INFLUXDB_DB=homelab
    - INFLUXDB_ADMIN_USER
    - INFLUXDB_ADMIN_PASSWORD
    - INFLUXDB_READ_USER
    - INFLUXDB_READ_USER_PASSWORD
    - INFLUXDB_WRITE_USER=${INFLUXDB_TELEGRAF_USER}
    - INFLUXDB_WRITE_USER_PASSWORD=${INFLUXDB_TELEGRAF_PASSWORD}
    healthcheck:
      test: curl -f http://localhost:8086/ping || exit 1
      interval: 30s
      timeout: 1s
      retries: 24
    networks:
    - proxy
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
      - traefik.enable=true
      - traefik.http.services.influx.loadbalancer.server.port=8086
      - traefik.http.routers.influx.entrypoints=https
      - traefik.http.routers.influx.rule=Host(`influxdb.${SUBDOMAIN}`)
      - traefik.http.routers.influx.tls=true
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  postgresql:
    image: postgres:11.2-alpine
    environment:
      POSTGRES_DB_FILE: /run/secrets/db
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
    - postgresql_data:/var/lib/postgresql
    ports:
    - 5432:5432
    configs:
    - source: postgres_init.v1
      target: /docker-entrypoint-initdb.d/postgres_init.sh
      mode: 0777
    secrets:
    - source: postgresql_db.v1
      target: db
    - source: postgresql_user.v1
      target: db_user
    - source: postgresql_password.v1
      target: db_password
    - source: postgresql_grafana_user.v1
      target: postgresql_grafana_user
    - source: postgresql_grafana_password.v1
      target: postgresql_grafana_password
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  mqtt:
    image: eclipse-mosquitto
    networks:
    - proxy
    configs:
    - source: mosquitto_config.v2
      target: /mosquitto/config/mosquitto.conf
    secrets:
    - source: passwd.v1
      target: passwd
    deploy:
      replicas: 1
      labels:
      - traefik.enable=true
      - traefik.tcp.services.mqtts.loadbalancer.server.port=1883
      - traefik.tcp.routers.mqtts.rule=HostSNI(`mqtts.${SUBDOMAIN}`)
      - traefik.tcp.routers.mqtts.entrypoints=mqtts
      - traefik.tcp.routers.mqtts.tls=true
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  grafana:
    image: grafana/grafana:6.5.2
    environment:
    - GF_ANALYTICS_ENABLED=false
    - GF_REPORTING_ENABLED=false
    - GF_DASHBOARDS_VERSIONS_TO_KEEP=5
    - GF_SMTP_ENABLED=true
    - GF_SMTP_HOST__FILE=/run/secrets/smtp_host
    - GF_SMTP_USER__FILE=/run/secrets/smtp_user
    - GF_SMTP_PASSWORD__FILE=/run/secrets/smtp_password
    - GF_SMTP_FROM_ADDRESS__FILE=/run/secrets/smtp_from_address
    - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s
    - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/admin_user
    - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/admin_password
    - GF_INSTALL_PLUGINS=blackmirror1-singlestat-math-panel,grafana-piechart-panel
    volumes:
    - grafana_data:/var/lib/grafana
    secrets:
    - source: grafana_admin_user.v1
      target: admin_user
    - source: grafana_admin_password.v1
      target: admin_password
    - source: grafana_smtp_host.v1
      target: smtp_host
    - source: grafana_smtp_user.v1
      target: smtp_user
    - source: grafana_smtp_password.v1
      target: smtp_password
    - source: grafana_smtp_from_address.v1
      target: smtp_from_address
    networks:
    - proxy
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
      - traefik.enable=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.rule=Host(`grafana.${SUBDOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=https
      - traefik.http.routers.grafana.tls=true
    logging:
      driver: ${LOGGING_DRIVER:?not set}
  hass:
    image: homeassistant/home-assistant:stable
    networks:
    - proxy
    volumes:
    - ./data/homeassistant:/config
    deploy:
      replicas: 1
      labels:
      - traefik.enable=true
      - traefik.http.services.hass.loadbalancer.server.port=8123
      - traefik.http.routers.hass.rule=Host(`hass.${SUBDOMAIN}`)
      - traefik.http.routers.hass.entrypoints=https
      - traefik.http.routers.hass.tls=true
      placement:
        constraints:
        - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: ${LOGGING_DRIVER:?not set}
configs:
  prometheus.yml.v3:
    file: ./configs/prometheus.yml
  postgres_init.v1:
    file: ./configs/postgres_init.sh
  mosquitto_config.v2:
    file: ./secrets/mosquitto.conf
secrets:
  traefik_proxy_password.v1:
    file: ./secrets/traefik_proxy_password
  gandi_api_key.v1:
    file: ./secrets/gandi_api_key
  postgresql_db.v1:
    file: ./secrets/postgresql_db
  postgresql_user.v1:
    file: ./secrets/postgresql_user
  postgresql_password.v1:
    file: ./secrets/postgresql_password
  postgresql_grafana_user.v1:
    file: ./secrets/postgresql_grafana_user
  postgresql_grafana_password.v1:
    file: ./secrets/postgresql_grafana_password
  passwd.v1:
    file: ./secrets/passwd
  grafana_admin_user.v1:
    file: ./secrets/grafana_admin_user
  grafana_admin_password.v1:
    file: ./secrets/grafana_admin_password
  grafana_smtp_host.v1:
    file: ./secrets/smtp_host
  grafana_smtp_user.v1:
    file: ./secrets/smtp_email
  grafana_smtp_password.v1:
    file: ./secrets/smtp_password
  grafana_smtp_from_address.v1:
    file: ./secrets/smtp_email
networks:
  proxy:
    external: true
  portainer_agent:
    external: true
volumes:
  portainer:
  prometheus:
  traefik:
  influxdb_data:
  postgresql_data:
  grafana_data:
